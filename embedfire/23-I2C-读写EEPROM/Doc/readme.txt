/*********************************************************************************************/
【*】程序简介

-工程名称：基本读写EEPROM（模拟i2c）
-实验平台: 野火STM32-霸道 开发板 
-ST固件库版本：3.5.0

【 ！】功能简介：
读写板载的 I2C EEPROM 芯片。

学习目的：学习STM32的I2C驱动。

【*】注意事项：
无

【 ！】实验操作：
电脑端使用串口调试助手，选择电脑与STM32相连的COM口，设置为115200-N-8-1，
复位开发板，即可接收STM32串口发送给电脑的调试信息。


【*】 引脚分配

EEPROM（AT24C02）：
EEPROM芯片的I2C接口与STM32的I2C1相连,且已接上拉电阻。
		SCL	<--->PB6
		SDA	<--->PB7
		
串口(TTL-USB TO USART)：
CH340的收发引脚与STM32的发收引脚相连。
	RX<--->PA9
	TX<--->PA10

/*********************************************************************************************/
【*】程序描述：

< bsp_i2c_ee.h >
	
	1.宏定义I2C号、GPIO引脚、端口、时钟
	2.宏定义自己I2C的通讯速率、地址及传输的数据长度（I2C_PageSize等下再来看是怎么搞，看来这个页长度是专属EEPROM的）



< bsp_i2c_ee.c >

声明

配置I2C使用的引脚
	
	1.引用结构体
	2.使能I2C外设时钟，使能I2C所用GPIO的端口时钟
	3.设置SCL和SDA的引脚、速率，设置对应端口为复用开漏模式

配置I2c的工作模式

	1.引用结构体
	2.配置I2C的使用方式为I2C模式
	3.配置I2C时钟的占空比、自己的地址、是否能够发出响应，
	  设置寻址模式与自己的地址长度一致、设置I2C的通信速率
	4.按照上方的配置，初始化I2C，然后使能I2C

   	――然后把 I2C 的GPIO及模式配置都用 I2C_EE_Init 函数封装起来，I2C的配置就完成了


选择EEPROM的设备地址

EEPROM的利用页写入的多字节写入

	1.定义要写的整页数NumOfPage，数据写完整数页后不足一页的数目NumOfSingle，地址是否为页的整数倍判断值Addr，
	  补齐剩下地址为一页的数目count，NumOfSingle填满count后多出的数据长度temp

	2.计算地址是否为整页数

	  是――判断要写入的数据是否超过一页
		否----利用页写入写完整页
		是----利用循环页写入写完要写的页数，每写完一页，增加写入的地址与指针，
		         当写完要写的页数后，利用页写入把剩下不足一页的数目写完。

	  否――判断要写入的数据是否超过一页
		否――判断要写入的地址是否超过count的数量
			是----把地址所在的多出但不足一页的那页写完，然后地址与指针增加count，再把剩下要写入的temp个数据写入
			否----把地址所在的多出但不足一页的那页写完
		是----计算把count所在那页填完后，对应的NumOfPage和NumOfSingle
		         把count所在页利用页写入填完，然后地址与指针增加count，
		         把要写入的整页数利用页写入填完，地址和指针随之增加，
		         当还有多余的不满一页的数据，利用页写入把它写完。

向EEPROM写入一个字节的数据

	1.产生I2C信号，设置超时等待时间
	2.检测 EV5 事件并清除标志
	3.发送 EEPROM 设备地址，把数据传输方向设置为发送方向
	4.检测 EV6 事件并清除标志
	5.发送要写入的 EEPROM 内部地址 (即 EEPROM 内部存储器的地址)
	6.检测 EV8 事件并清除标志
	7.发送一字节要写入的数据
	8.检测 EV8 事件并清除标志
	9.发送停止信号
 * 库函数 I2C_CheckEvent 用于检测事件，若检测到事件，则进入通讯的下一阶段，若未检测到事件则停留在此处一直检测


EEPROM的页写入

	1.等待I2C总线空闲
	2.与发送一字节的1~9基本一致，区别在于页写入在发送要写入的数据时使用了循环，发送了一页对应长度的数据

EEPROM的页数据读取
		
	1.等待I2C总线空闲
	2.产生I2C起始信号
	3.检测EV5事件并清除标志
	4.发送EEPROM设备地址
	5.检测EV6事件并清除标志
	6.通过重新设置PE位清除EV6事件
	7.发送要读取的EEPROM内部地址 (即 EEPROM 内部存储器的地址）
	8.检测EV8事件并清除标志
	9.产生第二次I2C起始信号
	10.检测EV5事件并清除标志
	11.发送EEPROM设备地址
	12.检测EV6事件并清除标志
	13.读取NumByteToRead个数据
	    若NumByteToRead=1，表示已经接收到最后一个数据了， 发送非应答信号，结束传输
	    检测EV7事件并清除标志
	    通过指针的自增和接受数据数目的自减，从设备中一个字节一个字节的读取数据
	14.使能应答，方便下一次 I2C 传输

等待EEPROM内部擦写完毕

	1.产生I2C信号，向EEPROM发送它的设备地址
	2.地址发送完成后，当检测到SR1寄存器的ADDR置1，则EEPROM返回了应答信号，
	  表示EEPROM已经准备好，AF置1则应答失败
	PS:由于EEPROM的特性，每次写完数据后都要等待擦写完毕，再写下一部分的数据

I2C等待事件超时函数
	
	1.当I2C超时还无响应，则使用EEPROM_ERROR封装的串口printf输出错误信息		



<bsp_i2c_gpio.c>：
	
	1.CPU发起I2C总线启动信号函数定义
	2.CPU发起I2C总线停止信号函数定义						
	3.CPU向I2C总线发送8bit数据函数定义						
	4.CPU从I2C总线读取8bit数据函数定义
	5.等待读取应答信号函数定义
	6.应答信号ACK函数定义
	7.非应答信号NACK函数定义
	8.配置I2C总线上的GPIO
	9.检测设备函数定义

<bsp_i2c_gpio.h>：

	1.宏定义I2C的读写操作
	2.宏定义I2C总线连接的GPIO端口
	3.宏定义读写SCL、SDA

<bsp_i2c_ee.c>：
	
	1.定义检测串行EEPROM函数是否正常函数
	2.定义从串行EEPROM读取数据函数
	3.定义从串行EEPROM写入数据函数
	4.定义擦除函数
	5.定义延时函数
	6.定义EEPROM AT24C02 读写测试函数

<main.c>：
	
	1.调用LED灯引脚配置
	2.调用串口初始化配置
	3.测试读写
	
<bsp_usart.c><bsp_led.c>与前面章节的设置一致



/*********************************************************************************************/

【*】 联系我们

-野火官网  :https://embedfire.com
-野火论坛  :http://www.firebbs.cn
-野火资料下载中心：http://doc.embedfire.com/products/link
-野火商城   :https://yehuosm.tmall.com/
/*********************************************************************************************/