/*********************************************************************************************/
【*】程序简介

-工程名称：GPIO输入―按键检测
-实验平台: 野火STM32 霸道 开发板 

【 ！】功能简介：
通过按键的开关来控制LED的亮灭


【 ！】实验操作：
编译并下载程序到开发板，复位后按下按键可以控制LED的亮灭状态

/*********************************************************************************************/

【*】 引脚分配

按键：

	SW1	<-----> PA0
	SW2	<-----> PC13
	
	按下按键，对应引脚为高电平。

LED：
	LED_R	<-----> PB5
	LED_G	<-----> PB0
	LED_B	<-----> PB1

	对应引脚低电平则LED灯亮。

 * 对于霸道V2板，在实验中，请不要拔掉LED灯旁边J73对应盖好的黄色跳帽，这样会导致LED失去3V3的电源而不能工作。





/*********************************************************************************************/

【*】程序描述：

< bsp_key.h >

	1.宏定义按键对应的GPIO端口，GPIO时钟，GPIO引脚
	2.把按键的常用状态（按下、断开）定义成宏



< bsp_key.c >

- 按键GPIO初始化

	1.引用结构体
	2.开启按键的GPIO对应的外设时钟
	3.设置引脚、模式
	4.初始化GPIO（根据设定参数配置 GPIO）

- 检测按键的状态
	
	1.定义Key_Scan函数用于扫描按键状态
	2.利用GPIO_ReadInputDataBit函数获取GPIO引脚的输入电平
	3.判断GPIO_ReadInputDataBit的返回值是否与自定义的宏KEY_ON一致，一致则循环检测按键是否释放，按键释放后则返回一个KEY_ON



<main.c>

	1.调用初始化LED GPIO函数，初始化LED端口
	2.调用按键GPIO初始化函数，初始化按键
	3.循环检测按键状态，当检测到按键按下状态时反转LED



PS：其中，bsp_led.h  、bsp_led.c 沿用了之前中的程序

< bsp_led.h >  

	1.宏定义LED灯对应的GPIO端口，GPIO时钟，GPIO引脚
	2.把LED的常用状态（亮、灭、状态反转）也直接定义成宏
	3.把控制R、G、B灯的不同开关状态混出不同的颜色对应的状态定义成宏

< bsp_led.c >     

- LED GPIO初始化

	1.引用结构体
	2.开启GPIO对应的外设时钟
	3.设置引脚、模式、速度
	4.初始化GPIO（根据设定参数配置 GPIO）
	5.关闭所有的LED灯



/*********************************************************************************************/
【*】 联系我们

-野火官网  :https://embedfire.com
-野火论坛  :http://www.firebbs.cn
-野火商城  :https://yehuosm.tmall.com/
-野火资料下载中心：http://doc.embedfire.com/products/link

/*********************************************************************************************/

	




